name: docker publish
on:
  push:
    tags:
      - '*'
jobs:
  build-amd64:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: setup qemu
        uses: docker/setup-qemu-action@v2
      - name: setup buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: print available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: set version from tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: print version number
        run: echo ${{ env.RELEASE_VERSION }}
      - name: build & save
        run: sudo docker buildx build -o type=tar,dest=build-amd64.tar --platform linux/amd64 -t plattar/python-usd:version-${{ env.RELEASE_VERSION }}-amd64 -f Demofile .
      - name: cache
        uses: actions/upload-artifact@v3
        with:
          name: docker-build
          path: build-amd64.tar
          retention-days: 1
  build-arm64:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: setup qemu
        uses: docker/setup-qemu-action@v2
      - name: setup buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: print available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: set version from tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: print version number
        run: echo ${{ env.RELEASE_VERSION }}
      - name: build & save
        run: sudo docker buildx build -o type=tar,dest=build-arm64.tar --platform linux/arm64 -t plattar/python-usd:version-${{ env.RELEASE_VERSION }}-arm64 -f Demofile .
      - name: cache
        uses: actions/upload-artifact@v3
        with:
          name: docker-build
          path: build-arm64.tar
          retention-days: 1
  upload:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    needs: [build-amd64, build-arm64]
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: setup buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: print available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: set version from tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: print version number
        run: echo ${{ env.RELEASE_VERSION }}
      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_UPLOAD_USERNAME }}
          password: ${{ secrets.DOCKER_UPLOAD_TOKEN }}
      - name: load cache
        uses: actions/download-artifact@v3
        with:
          name: docker-build
      - name: upload linux/amd64
        run: |
          docker import --platform linux/amd64 build-amd64.tar - plattar/python-usd:version-${{ env.RELEASE_VERSION }}-amd64
          docker push plattar/python-usd:version-${{ env.RELEASE_VERSION }}-amd64
      - name: upload linux/arm64
        run: |
          docker import --platform linux/arm64 build-arm64.tar - plattar/python-usd:version-${{ env.RELEASE_VERSION }}-arm64
          docker push plattar/python-usd:version-${{ env.RELEASE_VERSION }}-arm64
      - name: create manifest
        run: docker manifest create plattar/python-usd:version-${{ env.RELEASE_VERSION }} plattar/python-usd:version-${{ env.RELEASE_VERSION }}-amd64 plattar/python-usd:version-${{ env.RELEASE_VERSION }}-arm64
      - name: upload manifest
        run: docker manifest push plattar/python-usd:version-${{ env.RELEASE_VERSION }}